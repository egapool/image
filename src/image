#!/usr/bin/env php
<?php

ini_set('max_execution_time', 0);
ini_set('memory_limit', -1);

const FUNC_RESIZE = 'resize';
const OPT_INPUT   = 'i';
const OPT_OUTPUT  = 'o';
const OPT_WIDTH   = 'w';

if (!ini_get('register_argc_argv')) {
  errorOutput("Fatal: please enable register_argv_argc on your php.ini.", 254);
}

$func = end($argv);
if ( is_null($func) || ($func !== FUNC_RESIZE) ) {
  errorOutput("Fatal: SubCommand is required!", 253);
}

$opts = getopt('i:o:w:');

if ( !isset($opts[OPT_INPUT]) ) {
  errorOutput("-i(input) option is required!", 252);
}
if ( !isset($opts[OPT_WIDTH]) ) {
  errorOutput("-w(width) option is required!", 252);
}
if ( !is_numeric($opts[OPT_WIDTH]) ) {
  errorOutput("-w(width) option is must numbers!", 252);
}
$input = getFullPath($opts[OPT_INPUT]);

$width = $opts[OPT_WIDTH];

require __DIR__ . '/../vendor/autoload.php';

use Intervention\Image\ImageManagerStatic as Image;

Image::configure(array('driver' => 'gd'));

resize($input,$width);

function errorOutput($msg,$code = 0 )
{
  fwrite(STDERR, <<<E
Fatal: $msg

E
);
  exit($code);
}

function getFullPath($filePath)
{
  $firstChar = substr($filePath,0,1);
  if ( $firstChar === "/" ) {
    return $filePath;
  }
  return getcwd()."/./".$filePath;
}

function resize($filePath,$maxWidth,$output = '')
{
  $img = Image::make($filePath);
  list($inputName,$inputExt) = explode(".",basename($filePath));
  $out = $output ? $output : $inputName."_".$maxWidth.".".$inputExt;
  $img = $img->resize($maxWidth,null, function ($constraint) {
      $constraint->aspectRatio();
      $constraint->upsize();
  })->save($out);
}

print "\n";
